from typing import Sequence

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.base import Task
from domain.enums import TaskStatus
from domain.types import TaskId, MessageId


class InlineKeyboardCreator:
    @staticmethod
    def create_task_window_buttons(task: Task) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton(
                text="‚Ü©Ô∏èÔ∏è –ù–∞–∑–∞–¥",
                callback_data="change_window_to_checklist")
        )
        keyboard.row(
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"change_window_to_task_edit_{task.id}"
            ),
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_task_from_checklist_{task.id}")
        )
        if task.status == TaskStatus.COMPLETED:
            keyboard.add(InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
                callback_data=f"mark_task_uncompleted_{task.id}")
            )

        else:
            keyboard.add(InlineKeyboardButton(
                text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å",
                callback_data=f"mark_task_completed_{task.id}")
            )
        return keyboard

    @staticmethod
    def create_checklist_window_buttons(tasks: Sequence[Task]) -> InlineKeyboardMarkup:

        keyboard = InlineKeyboardMarkup()
        for task in tasks:
            mark = "‚úÖ" if task.status == TaskStatus.COMPLETED else "‚ùå"
            keyboard.row(InlineKeyboardButton(
                text=f"{task.title} {mark}",
                callback_data=f"change_window_to_task_{task.id}",
            ))

        keyboard.row(
            InlineKeyboardButton(
                text="‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_checklist_window"),
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_task_by_clicking")
        )
        return keyboard

    @staticmethod
    def create_task_edit_window_buttons(task_id: TaskId) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(
            text="‚Ü©Ô∏èÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"change_window_to_task_{task_id}"))
        keyboard.add(InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
            callback_data=f"edit_task_title_{task_id}"))
        keyboard.add(InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
            callback_data=f"edit_task_description_{task_id}"))
        keyboard.add(InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ",
            callback_data=f"edit_task_all_{task_id}"))
        return keyboard

    @staticmethod
    def create_cancel_adding_button(start_msg_id: MessageId) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_task_adding_{start_msg_id}"))
        return keyboard

    @staticmethod
    def create_cancel_editing_button(start_msg_id: MessageId) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_task_editing_{start_msg_id}"))
        return keyboard